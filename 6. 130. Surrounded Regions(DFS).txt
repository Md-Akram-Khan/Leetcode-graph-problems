class Solution {\
private:
    void dfs(int rr, int cc,vector<vector<char>> board, vector<vector<int>> &vis)
    {
        int r = board.size(), c = board[0].size();
        vis[rr][cc] = 1;
        int a[] = {0, 0, 1, -1};
        int b[] = {-1, 1, 0, 0};
        for(int i = 0; i < 4; i++)
        {
            int nr = rr + a[i], nc = cc + b[i];
            if(nr >= 0 and nr < r and nc >= 0 and nc < c and board[nr][nc] != 'X' and !vis[nr][nc]) dfs(nr, nc,board, vis);
        }
    }
public:
    vector<vector<char>> solve(vector<vector<char>>& board) {
        int r = board.size(), c = board[0].size();
        vector<vector<int >>vis(r, vector<int>(c, 0));
        for(int i = 0; i < r; i++)
        {
            if(board[i][0] != 'X' and !vis[i][0]) dfs(i, 0, board, vis);
            if(board[i][c - 1] != 'X' and !vis[i][c - 1]) dfs(i, c - 1, board, vis);
        }
        for(int i = 0; i < c; i++)
        {
            if(board[0][i] != 'X' and !vis[0][i]) dfs(0, i, board, vis);
            if(board[r - 1][i] != 'X' and vis[r - 1][i] == 0) dfs(r - 1, i, board, vis);
        }
        for(int i = 0; i < r; i++)
        {
            for(int j = 0; j < c; j++)
            {
                if(!vis[i][j] and board[i][j] == 'O') board[i][j] = 'X';
            }
        }
        return board;
    }
};