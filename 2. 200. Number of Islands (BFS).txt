class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> vis(m, vector<int> (n, 0));
        queue<pair<int, int>> z;
        int cnt = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == '1' and vis[i][j] != 1)
                {
                    z.push({i, j});
                    cnt++;
                    while(!z.empty())
                    {
                        int row = z.front().first;
                        int colm = z.front().second;
                        z.pop();
                        int a[] = {0, 0, -1, 1};
                        int b[] = {1, -1, 0, 0};
                        vis[row][colm] = 1;
                        for(int i = 0; i < 4; i++)
                        {
                            int p = row + a[i], q = colm + b[i];
                            if(p >= 0 and p < m and q < n and q >= 0 and vis[p][q] != 1 and grid[p][q] == '1')
                            {
                                vis[p][q] = 1;
                                z.push({p,q});
                            }
                        }
                    }
                }
            }
        }
        return cnt;
    }
};