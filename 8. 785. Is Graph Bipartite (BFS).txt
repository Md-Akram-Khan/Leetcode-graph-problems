class Solution {
    private:
    bool check(int start, int color[], vector<vector<int>> graph)
    {
        queue<int> q;
        q.push(start);
        color[start] = 0;
        while(!q.empty())
        {
            int parent = q.front();
            q.pop();
            for(auto it : graph[parent])
            {
                if(color[it] == -1)
                {
                    q.push(it);
                    color[it] = !color[parent];
                }
                else if(color[it] == color[parent])
                    return false;
            }
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        int color[n];
        for(int i = 0; i < n; i++) color[i] = -1;
        for(int i = 0; i < n; i++)
        {
            if(color[i] == -1)
            {
                if(check(i, color, graph) == false) return false;
            }
        }
        return true;
    }
};